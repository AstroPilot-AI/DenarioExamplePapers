{
    "sub_tasks": [
        {
            "bullet_points": [
                "Load the 1000 merger trees from the provided PyTorch Geometric file.",
                "Split the data into training and test sets at the simulation (lh_id) level to avoid data leakage.",
                "Normalize node features (log10(mass), log10(concentration), log10(Vmax), scale factor) using statistics from the training set.",
                "For each graph, compute:",
                "- Graph Laplacian eigenvalues and spectral moments (mean, std, skewness, kurtosis, sum of smallest nonzero eigenvalues).",
                "- Diffusion map embeddings (top d eigenvectors of the random walk matrix), aggregate with mean, max, min pooling.",
                "- Edge-level features: scale factor difference and log mass ratio for each edge, aggregate with mean and variance.",
                "Assemble all engineered features into a single feature vector per graph.",
                "Add logging for any anomalies during feature engineering (e.g., graphs with too few nodes/edges or processing errors) to facilitate debugging and reproducibility.",
                "Explicitly document and save normalization parameters (means, variances) along with the computed spectral and diffusion features for complete reproducibility."
            ],
            "sub_task": "Data Loading, Preprocessing, and Feature Engineering",
            "sub_task_agent": "engineer"
        },
        {
            "bullet_points": [
                "Apply PCA to the engineered feature vectors from the training set, retaining enough components to explain 95% of the variance.",
                "Plot the explained variance and cumulative variance curve from PCA to validate the retained components and support interpretation.",
                "Transform both training and test set features using the fitted PCA.",
                "Construct baseline feature vectors by aggregating node features (mean, std, min, max for each node property).",
                "Save PCA-transformed features and baseline features for modeling."
            ],
            "sub_task": "Dimensionality Reduction and Baseline Feature Construction",
            "sub_task_agent": "engineer"
        },
        {
            "bullet_points": [
                "Train Random Forest and Gradient Boosting regressors to predict Omega_m and sigma_8 from the PCA-reduced features.",
                "Perform hyperparameter tuning using cross-validation, ensuring splits are strictly organized by lh_id groupings. Clearly note this in hyperparameter tuning logs and model performance outputs.",
                "Evaluate models on the test set using R² and MSE.",
                "Train and evaluate the same regressors on the baseline node-aggregated features.",
                "(Optional) Train a simple GCN for graph-level regression as a deep learning baseline, using CPU.",
                "Collect all predictions, true values, and model performance metrics."
            ],
            "sub_task": "Regression Modeling and Evaluation",
            "sub_task_agent": "engineer"
        },
        {
            "bullet_points": [
                "Generate plots illustrating:",
                "- Distributions of engineered features (spectral moments, diffusion embeddings, edge statistics).",
                "- PCA explained variance and projection of graphs in the first two principal components, colored by Omega_m and sigma_8.",
                "- Feature importances from tree-based models.",
                "- Predicted vs. true values for Omega_m and sigma_8 for all models.",
                "- Calibration plots (reliability diagrams) if uncertainty estimates are available.",
                "- Comparison plots between baseline and proposed features for side-by-side performance assessment.",
                "- Comparison of model performance (bar plots of R², MSE for all approaches).",
                "Save all plots and relevant summary statistics."
            ],
            "sub_task": "Visualization and Plot Generation",
            "sub_task_agent": "engineer"
        },
        {
            "bullet_points": [
                "Review all quantitative results and plots generated by the engineer.",
                "Provide clear references to all plots and quantitative metrics produced.",
                "Explicitly discuss how each modeling component (spectral, diffusion, and edge features) contributed to the final result.",
                "Compare the performance of classical graph features to baseline node aggregation and GCN approaches.",
                "Discuss the physical and methodological implications of the findings, referencing specific plots and statistics.",
                "Summarize key insights, limitations, and potential directions for future work.",
                "Write a comprehensive Results section suitable for inclusion in a scientific paper or report, including references to all relevant figures and tables."
            ],
            "sub_task": "Results Synthesis and Interpretation",
            "sub_task_agent": "researcher"
        }
    ]
}